name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Container Registry
        if: github.event_name != 'workflow_dispatch' || inputs.push_image
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=WordPress with Memcached
            org.opencontainers.image.description=WordPress Docker image with Memcached PHP extension for caching
            org.opencontainers.image.vendor=ReclaimerGold

      # Build builder stage separately for better caching
      - name: Build builder stage
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=gha,scope=builder
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:builder-cache
          cache-to: |
            type=gha,mode=max,scope=builder
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:builder-cache,mode=max
          push: false

      # Build and push runtime stage
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'workflow_dispatch' || inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=builder
            type=gha,scope=runtime
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:builder-cache
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=gha,mode=max,scope=runtime
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: false

      # Test the built image
      - name: Test Docker image
        if: github.event_name != 'workflow_dispatch' || inputs.push_image
        run: |
          echo "Testing Memcached extension in built image..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest php -c "
          if (extension_loaded('memcached')) {
            echo '✅ Memcached extension loaded successfully\n';
            echo 'Version: ' . phpversion('memcached') . '\n';
            \$m = new Memcached();
            echo 'Methods available: ' . count(get_class_methods(\$m)) . '\n';
            exit(0);
          } else {
            echo '❌ Memcached extension not loaded\n';
            exit(1);
          }
          "
